name: Python Code Quality

permissions:
  contents: write
  
on:
  pull_request:
    paths:
      - '**.py'
    branches:
      - main

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
      with:
        # We need to fetch all history for auto-fixing and committing changes
        fetch-depth: 0
        ref: ${{ github.head_ref || github.ref_name }}    
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint black isort autoflake
        
    - name: Configure Git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
    - name: Fix code with autoflake (remove unused imports)
      run: |
        autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive $(git ls-files '*.py')
        
    - name: Fix imports with isort
      run: |
        isort $(git ls-files '*.py')
        
    - name: Format code with Black
      run: |
        black $(git ls-files '*.py')
        
    - name: Check for changes
      id: git-check
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Analysing the code with pylint
      run: |
        pylint --fail-under=9.5 --rcfile=${{ github.workspace }}/.pylintrc $(git ls-files '*.py')
        
    - name: Commit auto-fixed code
      if: steps.git-check.outputs.changes == 'true'
      run: |
        git add .
        git commit -m "Auto-fix code style issues with Black, isort, and autoflake"
        git push origin ${{ github.head_ref || github.ref_name }}
        
